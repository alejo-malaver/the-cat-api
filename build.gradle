buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath "net.serenity-bdd:serenity-gradle-plugin:${serenityCoreVersion}"
		classpath "com.diffplug.spotless:spotless-plugin-gradle:${spotlessVersion}"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeVersion}"
	}
}
plugins {
	id "java"
	id "org.sonarqube" version "3.0"
}
allprojects {
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	apply plugin: 'org.sonarqube'
	apply plugin: 'java'
	apply plugin: 'net.serenity-bdd.aggregator'
	sourceCompatibility=11
	targetCompatibility=11
}
ext {
	libs = [
			slf4j			     : "org.slf4j:slf4j-simple:${slf4jVersion}",
			yamlbeans            : "com.esotericsoftware.yamlbeans:yamlbeans:${yamlbeansVersion}",
			jackson      	     : "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
			jacksonDatabind      : "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
			jacksonDatatype      : "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
			javafaker            : "com.github.javafaker:javafaker:${javafakerVersion}",
			jsonSchemaValidator  : "io.rest-assured:json-schema-validator:${jsonSchemaValidatorVersion}",

			test    : [
					serenity: [
							core                : "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
							cucumber6           : "net.serenity-bdd:serenity-cucumber6:${serenityCucumber6Version}",
							junit               : "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
							screenplay          : "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
							screenplayRest      : "net.serenity-bdd:serenity-screenplay-rest:${serenityCoreVersion}",
							ensure 				: "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}"
					],
					junit     			 : "junit:junit:${junitVersion}",
					assertj 			 : "org.assertj:assertj-core:${assertJVersion}",
					hamcrest			 : "org.hamcrest:hamcrest-all:${hamcrestVersion}",
					lombok               : "org.projectlombok:lombok:${lombokVersion}",
					cucumber6Core        : "io.cucumber:cucumber-java:${cucumber6Version}",
					cucumber6Junit       : "io.cucumber:cucumber-junit:${cucumber6Version}"
			]
	]
}

configurations.all {
	resolutionStrategy {
		force "io.cucumber:cucumber-java:${cucumber6Version}"
	}
}

dependencies {

	/* Lombok */
	compileOnly 		libs.test.lombok
	annotationProcessor libs.test.lombok

	/*Yaml*/
	implementation      libs.yamlbeans

	/*SchemaValidator*/
	implementation      libs.jsonSchemaValidator

	/*Jackson*/
	implementation 		libs.jackson
	implementation 		libs.jacksonDatabind
	implementation		libs.jacksonDatatype

	/*JavaFaker*/
	implementation 		libs.javafaker

	/*Cucumber and Hamcrest*/
	testImplementation 	libs.test.serenity.cucumber6,
			libs.test.hamcrest,
			libs.test.cucumber6Core,
			libs.test.cucumber6Junit

	/*Serenity*/
	testImplementation 	libs.test.serenity.core
	testImplementation 	libs.test.serenity.junit
	implementation 		libs.test.serenity.screenplay
	implementation 		libs.test.serenity.cucumber6
	implementation		libs.test.serenity.screenplayRest
	implementation      libs.test.serenity.ensure

	/*JUnit*/
	testImplementation 	libs.test.junit

	/*Others*/
	testImplementation 	libs.test.assertj
	testImplementation 	libs.slf4j
}
sonarqube {
	properties {
		property "sonar.projectKey", "geonames-timezone-qa-api"
		property "sonar.projectName", "Geonames - Timezone - Test Cases"
		property "sonar.sources", "src"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.java.binaries", "build/classes"
		property "sonar.coverage.exclusions", "**/*.java"
		property "sonar.exclusions", "**/*Generated.java"
		property "sonar.tests", ""
	}
}

spotless {
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}

	java {
		target ('src/**/*.java')

		indentWithSpaces()
		trimTrailingWhitespace()
		importOrder()
		removeUnusedImports()
		googleJavaFormat('1.12.0').aosp()
		licenseHeader '/**\n' +
				' * ©$YEAR CONFIDENCIAL©\n' +
				' * Todos los derechos reservados.\n' +
				' *\n' +
				' * @Autor: Alejandro Malaver\n' +
				' */'

		replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
		replaceRegex 'Remove trailing empty comment lines.', '\n\\s*\\*(\n\\s*\\*/\n)', '$1'
	}
}

tasks.withType(Test) {
	systemProperty "file.encoding", "UTF-8"
}
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

compileJava.dependsOn 'spotlessApply'

serenity {
	reports = ["single-page-html"]
}

gradle.startParameter.continueOnFailure = true
test.finalizedBy(aggregate)
